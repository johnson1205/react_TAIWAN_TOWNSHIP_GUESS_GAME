{"ast":null,"code":"var pi = Math.PI,\n  tau = 2 * pi,\n  quarterPi = pi / 4,\n  radians = pi / 180,\n  abs = Math.abs,\n  atan2 = Math.atan2,\n  cos = Math.cos,\n  sin = Math.sin;\nfunction halfArea(ring, closed) {\n  var i = 0,\n    n = ring.length,\n    sum = 0,\n    point = ring[closed ? i++ : n - 1],\n    lambda0,\n    lambda1 = point[0] * radians,\n    phi1 = point[1] * radians / 2 + quarterPi,\n    cosPhi0,\n    cosPhi1 = cos(phi1),\n    sinPhi0,\n    sinPhi1 = sin(phi1);\n  for (; i < n; ++i) {\n    point = ring[i];\n    lambda0 = lambda1, lambda1 = point[0] * radians;\n    phi1 = point[1] * radians / 2 + quarterPi;\n    cosPhi0 = cosPhi1, cosPhi1 = cos(phi1);\n    sinPhi0 = sinPhi1, sinPhi1 = sin(phi1);\n\n    // Spherical excess E for a spherical triangle with vertices: south pole,\n    // previous point, current point.  Uses a formula derived from Cagnoli’s\n    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n    // See https://github.com/d3/d3-geo/blob/master/README.md#geoArea\n    var dLambda = lambda1 - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      k = sinPhi0 * sinPhi1,\n      u = cosPhi0 * cosPhi1 + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n    sum += atan2(v, u);\n  }\n  return sum;\n}\nexport function sphericalRingArea(ring, interior) {\n  var sum = halfArea(ring, true);\n  if (interior) sum *= -1;\n  return (sum < 0 ? tau + sum : sum) * 2;\n}\nexport function sphericalTriangleArea(t) {\n  return abs(halfArea(t, false)) * 2;\n}","map":{"version":3,"names":["pi","Math","PI","tau","quarterPi","radians","abs","atan2","cos","sin","halfArea","ring","closed","i","n","length","sum","point","lambda0","lambda1","phi1","cosPhi0","cosPhi1","sinPhi0","sinPhi1","dLambda","sdLambda","adLambda","k","u","v","sphericalRingArea","interior","sphericalTriangleArea","t"],"sources":["C:/Users/johns/OneDrive/桌面/practice/map/node_modules/topojson-simplify/src/spherical.js"],"sourcesContent":["var pi = Math.PI,\n    tau = 2 * pi,\n    quarterPi = pi / 4,\n    radians = pi / 180,\n    abs = Math.abs,\n    atan2 = Math.atan2,\n    cos = Math.cos,\n    sin = Math.sin;\n\nfunction halfArea(ring, closed) {\n  var i = 0,\n      n = ring.length,\n      sum = 0,\n      point = ring[closed ? i++ : n - 1],\n      lambda0, lambda1 = point[0] * radians,\n      phi1 = (point[1] * radians) / 2 + quarterPi,\n      cosPhi0, cosPhi1 = cos(phi1),\n      sinPhi0, sinPhi1 = sin(phi1);\n\n  for (; i < n; ++i) {\n    point = ring[i];\n    lambda0 = lambda1, lambda1 = point[0] * radians;\n    phi1 = (point[1] * radians) / 2 + quarterPi;\n    cosPhi0 = cosPhi1, cosPhi1 = cos(phi1);\n    sinPhi0 = sinPhi1, sinPhi1 = sin(phi1);\n\n    // Spherical excess E for a spherical triangle with vertices: south pole,\n    // previous point, current point.  Uses a formula derived from Cagnoli’s\n    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n    // See https://github.com/d3/d3-geo/blob/master/README.md#geoArea\n    var dLambda = lambda1 - lambda0,\n        sdLambda = dLambda >= 0 ? 1 : -1,\n        adLambda = sdLambda * dLambda,\n        k = sinPhi0 * sinPhi1,\n        u = cosPhi0 * cosPhi1 + k * cos(adLambda),\n        v = k * sdLambda * sin(adLambda);\n    sum += atan2(v, u);\n  }\n\n  return sum;\n}\n\nexport function sphericalRingArea(ring, interior) {\n  var sum = halfArea(ring, true);\n  if (interior) sum *= -1;\n  return (sum < 0 ? tau + sum : sum) * 2;\n}\n\nexport function sphericalTriangleArea(t) {\n  return abs(halfArea(t, false)) * 2;\n}\n"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,IAAI,CAACC,EAAE;EACZC,GAAG,GAAG,CAAC,GAAGH,EAAE;EACZI,SAAS,GAAGJ,EAAE,GAAG,CAAC;EAClBK,OAAO,GAAGL,EAAE,GAAG,GAAG;EAClBM,GAAG,GAAGL,IAAI,CAACK,GAAG;EACdC,KAAK,GAAGN,IAAI,CAACM,KAAK;EAClBC,GAAG,GAAGP,IAAI,CAACO,GAAG;EACdC,GAAG,GAAGR,IAAI,CAACQ,GAAG;AAElB,SAASC,QAAQA,CAACC,IAAI,EAAEC,MAAM,EAAE;EAC9B,IAAIC,CAAC,GAAG,CAAC;IACLC,CAAC,GAAGH,IAAI,CAACI,MAAM;IACfC,GAAG,GAAG,CAAC;IACPC,KAAK,GAAGN,IAAI,CAACC,MAAM,GAAGC,CAAC,EAAE,GAAGC,CAAC,GAAG,CAAC,CAAC;IAClCI,OAAO;IAAEC,OAAO,GAAGF,KAAK,CAAC,CAAC,CAAC,GAAGZ,OAAO;IACrCe,IAAI,GAAIH,KAAK,CAAC,CAAC,CAAC,GAAGZ,OAAO,GAAI,CAAC,GAAGD,SAAS;IAC3CiB,OAAO;IAAEC,OAAO,GAAGd,GAAG,CAACY,IAAI,CAAC;IAC5BG,OAAO;IAAEC,OAAO,GAAGf,GAAG,CAACW,IAAI,CAAC;EAEhC,OAAOP,CAAC,GAAGC,CAAC,EAAE,EAAED,CAAC,EAAE;IACjBI,KAAK,GAAGN,IAAI,CAACE,CAAC,CAAC;IACfK,OAAO,GAAGC,OAAO,EAAEA,OAAO,GAAGF,KAAK,CAAC,CAAC,CAAC,GAAGZ,OAAO;IAC/Ce,IAAI,GAAIH,KAAK,CAAC,CAAC,CAAC,GAAGZ,OAAO,GAAI,CAAC,GAAGD,SAAS;IAC3CiB,OAAO,GAAGC,OAAO,EAAEA,OAAO,GAAGd,GAAG,CAACY,IAAI,CAAC;IACtCG,OAAO,GAAGC,OAAO,EAAEA,OAAO,GAAGf,GAAG,CAACW,IAAI,CAAC;;IAEtC;IACA;IACA;IACA;IACA,IAAIK,OAAO,GAAGN,OAAO,GAAGD,OAAO;MAC3BQ,QAAQ,GAAGD,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MAChCE,QAAQ,GAAGD,QAAQ,GAAGD,OAAO;MAC7BG,CAAC,GAAGL,OAAO,GAAGC,OAAO;MACrBK,CAAC,GAAGR,OAAO,GAAGC,OAAO,GAAGM,CAAC,GAAGpB,GAAG,CAACmB,QAAQ,CAAC;MACzCG,CAAC,GAAGF,CAAC,GAAGF,QAAQ,GAAGjB,GAAG,CAACkB,QAAQ,CAAC;IACpCX,GAAG,IAAIT,KAAK,CAACuB,CAAC,EAAED,CAAC,CAAC;EACpB;EAEA,OAAOb,GAAG;AACZ;AAEA,OAAO,SAASe,iBAAiBA,CAACpB,IAAI,EAAEqB,QAAQ,EAAE;EAChD,IAAIhB,GAAG,GAAGN,QAAQ,CAACC,IAAI,EAAE,IAAI,CAAC;EAC9B,IAAIqB,QAAQ,EAAEhB,GAAG,IAAI,CAAC,CAAC;EACvB,OAAO,CAACA,GAAG,GAAG,CAAC,GAAGb,GAAG,GAAGa,GAAG,GAAGA,GAAG,IAAI,CAAC;AACxC;AAEA,OAAO,SAASiB,qBAAqBA,CAACC,CAAC,EAAE;EACvC,OAAO5B,GAAG,CAACI,QAAQ,CAACwB,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC;AACpC"},"metadata":{},"sourceType":"module","externalDependencies":[]}