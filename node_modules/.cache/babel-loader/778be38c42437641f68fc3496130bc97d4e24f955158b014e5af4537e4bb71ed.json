{"ast":null,"code":"import hashset from \"./hash/hashset\";\nimport hashmap from \"./hash/hashmap\";\nimport equalPoint from \"./hash/point-equal\";\nimport hashPoint from \"./hash/point-hash\";\n\n// Given an extracted (pre-)topology, identifies all of the junctions. These are\n// the points at which arcs (lines or rings) will need to be cut so that each\n// arc is represented uniquely.\n//\n// A junction is a point where at least one arc deviates from another arc going\n// through the same point. For example, consider the point B. If there is a arc\n// through ABC and another arc through CBA, then B is not a junction because in\n// both cases the adjacent point pairs are {A,C}. However, if there is an\n// additional arc ABD, then {A,D} != {A,C}, and thus B becomes a junction.\n//\n// For a closed ring ABCA, the first point A’s adjacent points are the second\n// and last point {B,C}. For a line, the first and last point are always\n// considered junctions, even if the line is closed; this ensures that a closed\n// line is never rotated.\nexport default function (topology) {\n  var coordinates = topology.coordinates,\n    lines = topology.lines,\n    rings = topology.rings,\n    indexes = index(),\n    visitedByIndex = new Int32Array(coordinates.length),\n    leftByIndex = new Int32Array(coordinates.length),\n    rightByIndex = new Int32Array(coordinates.length),\n    junctionByIndex = new Int8Array(coordinates.length),\n    junctionCount = 0,\n    // upper bound on number of junctions\n    i,\n    n,\n    previousIndex,\n    currentIndex,\n    nextIndex;\n  for (i = 0, n = coordinates.length; i < n; ++i) {\n    visitedByIndex[i] = leftByIndex[i] = rightByIndex[i] = -1;\n  }\n  for (i = 0, n = lines.length; i < n; ++i) {\n    var line = lines[i],\n      lineStart = line[0],\n      lineEnd = line[1];\n    currentIndex = indexes[lineStart];\n    nextIndex = indexes[++lineStart];\n    ++junctionCount, junctionByIndex[currentIndex] = 1; // start\n    while (++lineStart <= lineEnd) {\n      sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[lineStart]);\n    }\n    ++junctionCount, junctionByIndex[nextIndex] = 1; // end\n  }\n\n  for (i = 0, n = coordinates.length; i < n; ++i) {\n    visitedByIndex[i] = -1;\n  }\n  for (i = 0, n = rings.length; i < n; ++i) {\n    var ring = rings[i],\n      ringStart = ring[0] + 1,\n      ringEnd = ring[1];\n    previousIndex = indexes[ringEnd - 1];\n    currentIndex = indexes[ringStart - 1];\n    nextIndex = indexes[ringStart];\n    sequence(i, previousIndex, currentIndex, nextIndex);\n    while (++ringStart <= ringEnd) {\n      sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[ringStart]);\n    }\n  }\n  function sequence(i, previousIndex, currentIndex, nextIndex) {\n    if (visitedByIndex[currentIndex] === i) return; // ignore self-intersection\n    visitedByIndex[currentIndex] = i;\n    var leftIndex = leftByIndex[currentIndex];\n    if (leftIndex >= 0) {\n      var rightIndex = rightByIndex[currentIndex];\n      if ((leftIndex !== previousIndex || rightIndex !== nextIndex) && (leftIndex !== nextIndex || rightIndex !== previousIndex)) {\n        ++junctionCount, junctionByIndex[currentIndex] = 1;\n      }\n    } else {\n      leftByIndex[currentIndex] = previousIndex;\n      rightByIndex[currentIndex] = nextIndex;\n    }\n  }\n  function index() {\n    var indexByPoint = hashmap(coordinates.length * 1.4, hashIndex, equalIndex, Int32Array, -1, Int32Array),\n      indexes = new Int32Array(coordinates.length);\n    for (var i = 0, n = coordinates.length; i < n; ++i) {\n      indexes[i] = indexByPoint.maybeSet(i, i);\n    }\n    return indexes;\n  }\n  function hashIndex(i) {\n    return hashPoint(coordinates[i]);\n  }\n  function equalIndex(i, j) {\n    return equalPoint(coordinates[i], coordinates[j]);\n  }\n  visitedByIndex = leftByIndex = rightByIndex = null;\n  var junctionByPoint = hashset(junctionCount * 1.4, hashPoint, equalPoint),\n    j;\n\n  // Convert back to a standard hashset by point for caller convenience.\n  for (i = 0, n = coordinates.length; i < n; ++i) {\n    if (junctionByIndex[j = indexes[i]]) {\n      junctionByPoint.add(coordinates[j]);\n    }\n  }\n  return junctionByPoint;\n}","map":{"version":3,"names":["hashset","hashmap","equalPoint","hashPoint","topology","coordinates","lines","rings","indexes","index","visitedByIndex","Int32Array","length","leftByIndex","rightByIndex","junctionByIndex","Int8Array","junctionCount","i","n","previousIndex","currentIndex","nextIndex","line","lineStart","lineEnd","sequence","ring","ringStart","ringEnd","leftIndex","rightIndex","indexByPoint","hashIndex","equalIndex","maybeSet","j","junctionByPoint","add"],"sources":["C:/Users/johns/OneDrive/桌面/practice/map/node_modules/topojson-server/src/join.js"],"sourcesContent":["import hashset from \"./hash/hashset\";\nimport hashmap from \"./hash/hashmap\";\nimport equalPoint from \"./hash/point-equal\";\nimport hashPoint from \"./hash/point-hash\";\n\n// Given an extracted (pre-)topology, identifies all of the junctions. These are\n// the points at which arcs (lines or rings) will need to be cut so that each\n// arc is represented uniquely.\n//\n// A junction is a point where at least one arc deviates from another arc going\n// through the same point. For example, consider the point B. If there is a arc\n// through ABC and another arc through CBA, then B is not a junction because in\n// both cases the adjacent point pairs are {A,C}. However, if there is an\n// additional arc ABD, then {A,D} != {A,C}, and thus B becomes a junction.\n//\n// For a closed ring ABCA, the first point A’s adjacent points are the second\n// and last point {B,C}. For a line, the first and last point are always\n// considered junctions, even if the line is closed; this ensures that a closed\n// line is never rotated.\nexport default function(topology) {\n  var coordinates = topology.coordinates,\n      lines = topology.lines,\n      rings = topology.rings,\n      indexes = index(),\n      visitedByIndex = new Int32Array(coordinates.length),\n      leftByIndex = new Int32Array(coordinates.length),\n      rightByIndex = new Int32Array(coordinates.length),\n      junctionByIndex = new Int8Array(coordinates.length),\n      junctionCount = 0, // upper bound on number of junctions\n      i, n,\n      previousIndex,\n      currentIndex,\n      nextIndex;\n\n  for (i = 0, n = coordinates.length; i < n; ++i) {\n    visitedByIndex[i] = leftByIndex[i] = rightByIndex[i] = -1;\n  }\n\n  for (i = 0, n = lines.length; i < n; ++i) {\n    var line = lines[i],\n        lineStart = line[0],\n        lineEnd = line[1];\n    currentIndex = indexes[lineStart];\n    nextIndex = indexes[++lineStart];\n    ++junctionCount, junctionByIndex[currentIndex] = 1; // start\n    while (++lineStart <= lineEnd) {\n      sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[lineStart]);\n    }\n    ++junctionCount, junctionByIndex[nextIndex] = 1; // end\n  }\n\n  for (i = 0, n = coordinates.length; i < n; ++i) {\n    visitedByIndex[i] = -1;\n  }\n\n  for (i = 0, n = rings.length; i < n; ++i) {\n    var ring = rings[i],\n        ringStart = ring[0] + 1,\n        ringEnd = ring[1];\n    previousIndex = indexes[ringEnd - 1];\n    currentIndex = indexes[ringStart - 1];\n    nextIndex = indexes[ringStart];\n    sequence(i, previousIndex, currentIndex, nextIndex);\n    while (++ringStart <= ringEnd) {\n      sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[ringStart]);\n    }\n  }\n\n  function sequence(i, previousIndex, currentIndex, nextIndex) {\n    if (visitedByIndex[currentIndex] === i) return; // ignore self-intersection\n    visitedByIndex[currentIndex] = i;\n    var leftIndex = leftByIndex[currentIndex];\n    if (leftIndex >= 0) {\n      var rightIndex = rightByIndex[currentIndex];\n      if ((leftIndex !== previousIndex || rightIndex !== nextIndex)\n        && (leftIndex !== nextIndex || rightIndex !== previousIndex)) {\n        ++junctionCount, junctionByIndex[currentIndex] = 1;\n      }\n    } else {\n      leftByIndex[currentIndex] = previousIndex;\n      rightByIndex[currentIndex] = nextIndex;\n    }\n  }\n\n  function index() {\n    var indexByPoint = hashmap(coordinates.length * 1.4, hashIndex, equalIndex, Int32Array, -1, Int32Array),\n        indexes = new Int32Array(coordinates.length);\n\n    for (var i = 0, n = coordinates.length; i < n; ++i) {\n      indexes[i] = indexByPoint.maybeSet(i, i);\n    }\n\n    return indexes;\n  }\n\n  function hashIndex(i) {\n    return hashPoint(coordinates[i]);\n  }\n\n  function equalIndex(i, j) {\n    return equalPoint(coordinates[i], coordinates[j]);\n  }\n\n  visitedByIndex = leftByIndex = rightByIndex = null;\n\n  var junctionByPoint = hashset(junctionCount * 1.4, hashPoint, equalPoint), j;\n\n  // Convert back to a standard hashset by point for caller convenience.\n  for (i = 0, n = coordinates.length; i < n; ++i) {\n    if (junctionByIndex[j = indexes[i]]) {\n      junctionByPoint.add(coordinates[j]);\n    }\n  }\n\n  return junctionByPoint;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}