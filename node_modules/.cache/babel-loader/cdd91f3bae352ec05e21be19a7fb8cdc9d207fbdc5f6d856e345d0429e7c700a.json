{"ast":null,"code":"export default function (size, hash, equal, keyType, keyEmpty, valueType) {\n  if (arguments.length === 3) {\n    keyType = valueType = Array;\n    keyEmpty = null;\n  }\n  var keystore = new keyType(size = 1 << Math.max(4, Math.ceil(Math.log(size) / Math.LN2))),\n    valstore = new valueType(size),\n    mask = size - 1;\n  for (var i = 0; i < size; ++i) {\n    keystore[i] = keyEmpty;\n  }\n  function set(key, value) {\n    var index = hash(key) & mask,\n      matchKey = keystore[index],\n      collisions = 0;\n    while (matchKey != keyEmpty) {\n      if (equal(matchKey, key)) return valstore[index] = value;\n      if (++collisions >= size) throw new Error(\"full hashmap\");\n      matchKey = keystore[index = index + 1 & mask];\n    }\n    keystore[index] = key;\n    valstore[index] = value;\n    return value;\n  }\n  function maybeSet(key, value) {\n    var index = hash(key) & mask,\n      matchKey = keystore[index],\n      collisions = 0;\n    while (matchKey != keyEmpty) {\n      if (equal(matchKey, key)) return valstore[index];\n      if (++collisions >= size) throw new Error(\"full hashmap\");\n      matchKey = keystore[index = index + 1 & mask];\n    }\n    keystore[index] = key;\n    valstore[index] = value;\n    return value;\n  }\n  function get(key, missingValue) {\n    var index = hash(key) & mask,\n      matchKey = keystore[index],\n      collisions = 0;\n    while (matchKey != keyEmpty) {\n      if (equal(matchKey, key)) return valstore[index];\n      if (++collisions >= size) break;\n      matchKey = keystore[index = index + 1 & mask];\n    }\n    return missingValue;\n  }\n  function keys() {\n    var keys = [];\n    for (var i = 0, n = keystore.length; i < n; ++i) {\n      var matchKey = keystore[i];\n      if (matchKey != keyEmpty) keys.push(matchKey);\n    }\n    return keys;\n  }\n  return {\n    set: set,\n    maybeSet: maybeSet,\n    // set if unset\n    get: get,\n    keys: keys\n  };\n}","map":{"version":3,"names":["size","hash","equal","keyType","keyEmpty","valueType","arguments","length","Array","keystore","Math","max","ceil","log","LN2","valstore","mask","i","set","key","value","index","matchKey","collisions","Error","maybeSet","get","missingValue","keys","n","push"],"sources":["C:/Users/johns/OneDrive/桌面/practice/map/node_modules/topojson-server/src/hash/hashmap.js"],"sourcesContent":["export default function(size, hash, equal, keyType, keyEmpty, valueType) {\n  if (arguments.length === 3) {\n    keyType = valueType = Array;\n    keyEmpty = null;\n  }\n\n  var keystore = new keyType(size = 1 << Math.max(4, Math.ceil(Math.log(size) / Math.LN2))),\n      valstore = new valueType(size),\n      mask = size - 1;\n\n  for (var i = 0; i < size; ++i) {\n    keystore[i] = keyEmpty;\n  }\n\n  function set(key, value) {\n    var index = hash(key) & mask,\n        matchKey = keystore[index],\n        collisions = 0;\n    while (matchKey != keyEmpty) {\n      if (equal(matchKey, key)) return valstore[index] = value;\n      if (++collisions >= size) throw new Error(\"full hashmap\");\n      matchKey = keystore[index = (index + 1) & mask];\n    }\n    keystore[index] = key;\n    valstore[index] = value;\n    return value;\n  }\n\n  function maybeSet(key, value) {\n    var index = hash(key) & mask,\n        matchKey = keystore[index],\n        collisions = 0;\n    while (matchKey != keyEmpty) {\n      if (equal(matchKey, key)) return valstore[index];\n      if (++collisions >= size) throw new Error(\"full hashmap\");\n      matchKey = keystore[index = (index + 1) & mask];\n    }\n    keystore[index] = key;\n    valstore[index] = value;\n    return value;\n  }\n\n  function get(key, missingValue) {\n    var index = hash(key) & mask,\n        matchKey = keystore[index],\n        collisions = 0;\n    while (matchKey != keyEmpty) {\n      if (equal(matchKey, key)) return valstore[index];\n      if (++collisions >= size) break;\n      matchKey = keystore[index = (index + 1) & mask];\n    }\n    return missingValue;\n  }\n\n  function keys() {\n    var keys = [];\n    for (var i = 0, n = keystore.length; i < n; ++i) {\n      var matchKey = keystore[i];\n      if (matchKey != keyEmpty) keys.push(matchKey);\n    }\n    return keys;\n  }\n\n  return {\n    set: set,\n    maybeSet: maybeSet, // set if unset\n    get: get,\n    keys: keys\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}